// main global script file

// A function that initializes a bunch of stuff.
function initialize_control_panel() { 
  // Centre the control panel
  gPanel.Centre();
  // Centre the Restart dialog as well
  gRestartYN.Centre(); 
  if (IsSpeechVoxAvailable()) { 
    // If there is a speech-vox file, then set it to voice and text. It's best to use
    // both whenever possible, for the player's sake.
    Speech.VoiceMode = eSpeechVoiceAndText;
  }
  
  //And now, set all the defaults
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  SetGameSpeed(40);
  sldSpeed.Value = 40;
  if (IsSpeechVoxAvailable()) {
     Speech.VoiceMode = eSpeechVoiceAndText;
     SetSpeechVolume(255);
  }
}

// Called when the game starts, before the first room is loaded
function game_start() {   
  // Put the code all in a function and then just call the function. 
  // It saves cluttering up places like game_start.
  //initialize_control_panel(); 
  // Use the KeyboardMovement module to, per default, replicate the standard
  // keyboard movement of most Sierra games. See KeyboardMovement.txt for more info
  // Set Speech Font
  Game.SpeechFont = 3;
  KeyboardMovement.SetMode(eKeyboardMovement_Pressing); 
}

function repeatedly_execute() {
  
  // Put here anything you want to happen every game cycle, even when
  // the game is paused. This will not run when the game is blocked
  // inside a command like a blocking Walk()
  
  if (mouse.y < 60) {
    // only make changes to cursor when going into the menu area
    if (!mouseInTopMenu) {
      lastMouseMode = mouse.Mode;
      // switch to the Use cursor (to select items with)
      mouse.Mode = eModeInteract;
      // But, override the appearance to look like the arrow
      mouse.UseModeGraphic(eModePointer);
      mouseInTopMenu = true;
    }
  }
  else {
    // only make changes to cursor when exiting the menu area without an active object
    if (mouseInTopMenu) {
      if (player.ActiveInventory == null && !gPanel.Visible && !gQuitYN.Visible) {
        mouse.Mode = lastMouseMode;
      }
      mouseInTopMenu = false;
    }
  }
  
  if (inventoryLabelCounter > 60) {
    InvDescription.Text = "";
    inventoryLabelCounter = 0;
  }
  else {
    inventoryLabelCounter++;
  }
  
  if (IsGamePaused() == 1) return;

  // Put here anything you want to happen every game cycle, but not
  // when the game is paused.
}

function repeatedly_execute_always() {
  
  // Put anything you want to happen every game cycle, even
  // when the game is blocked inside a command like a
  // blocking Walk().
  // You cannot run blocking commands from this function.
  
}

// Called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode) {
  // The following is called before "if game is paused keycode=0", so
  // it'll happen even when the game is paused.
  
  if ((keycode == eKeyEscape) && gRestartYN.Visible) {
    //Use ESC to cancel restart.
    gRestartYN.Visible = false; 
    gIconbar.Visible = true;
    return;
  }
  if ((keycode == eKeyEscape) && gPanel.Visible) {
    // Use ESC to turn the panel off.
    gPanel.Visible = false; 
    mouse.UseDefaultGraphic();
    gIconbar.Visible = true;
    return;
  }
  
  if (keycode == eKeyReturn) { 
    // ENTER, in this case merely confirms restart
    if (gRestartYN.Visible) RestartGame();
  }

  if (IsGamePaused() || (IsInterfaceEnabled() == 0))
  {
    // If the game is paused with a modal GUI on the
    // screen, or the player interface is disabled in
    // a cut scene, ignore any keypresses.
    return;
  }

  // FUNCTION KEYS AND SYSTEM SHORTCUTS
  if (keycode == eKeyEscape) {
    // ESC
    gPanel.Visible = true; 
    gIconbar.Visible = false;
    mouse.UseModeGraphic(eModePointer);
  }
  
  if (keycode == eKeyF12) SaveScreenShot("scrnshot.bmp");  // F12

  // DEBUG FUNCTIONS
  if (keycode == eKeyCtrlS)  Debug(0,0);  // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV)  Debug(1,0);  // Ctrl-V, version
  if (keycode == eKeyCtrlA)  Debug(2,0);  // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX)  Debug(3,0);  // Ctrl-X, teleport to room
  if (keycode == eKeyCtrlW && game.debug_mode) 
    player.PlaceOnWalkableArea(); //Ctrl-W, move to walkable area 
}


function on_mouse_click(MouseButton button) {
  // called when a mouse button is clicked. button is either LEFT or RIGHT
  if (IsGamePaused() == 1) {
    // Game is paused, so do nothing (ie. don't allow mouse click)
  }
  else if (button == eMouseLeft) {
    ProcessClick(mouse.x, mouse.y, mouse.Mode );
    if (gCursorSelect.Visible) {
      gCursorSelect.Visible = false;
    }
  }
  else if (button == eMouseWheelSouth){
    // mouse-wheel down, so cycle cursor
    mouse.SelectNextMode();
  }
  else if (button == eMouseRight) {
    // right-click, open cursor selection gui
    gCursorSelect.X = mouse.x - 52;
    gCursorSelect.Y = mouse.y - 42;
    gCursorSelect.Visible = true;
    mouse.Mode = eModePointer;
  } 
  else if (button == eMouseMiddle) { 
    // Middle-button-click, default make character walk to clicked area (a little shortcut)
    // Could have been just "player.Walk(mouse.x,mouse.y)", but it's best to
    // leave our options open - what if you have a special script triggered
    // on "walking" mode?
    ProcessClick(mouse.x, mouse.y, eModeWalkto); 
  }
  else if (button == eMouseWheelNorth) { 
    // Mouse-wheel up, cycle cursors 
    // If mode isn't WALK, set the previous mode (notice usage of numbers instead
    // of eNums, when it suits us)...
    if (mouse.Mode>0) mouse.Mode=mouse.Mode-1; 
    else 
    { 
      // ...but if it is WALK mode...
      if (player.ActiveInventory!=null) 
      {
        //...and the player has a selected inventory item, set mouse mode to UseInv. 
        mouse.Mode=eModeUseinv; 
      }
      else 
      {
        // If they don't, however, just set it to mode TALK (change this line if you add more cursor modes)
        mouse.Mode=eModeTalkto; 
      }
    }
  }
}

function interface_click(int interface, int button) {
  // This function is obsolete, from 2.62 and earlier versions.
}

function btnIconExit_Click(GUIControl *control, MouseButton button) {
  gQuitYN.SetPosition(314, 300);
  gQuitYN.Visible = true;
  mouse.UseModeGraphic(eModePointer);
}

function btnIconAbout_Click(GUIControl *control, MouseButton button) {
  gPanel.Visible=true;
  gIconbar.Visible=false;
  mouse.UseModeGraphic(eModePointer);
}

//START OF CONTROL PANEL FUNCTIONS

function btnAbout_OnClick(GUIControl *control, MouseButton button)
{
  Display("Adventure Game Studio run-time engine default game.");
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  gPanel.Visible = false;
  Wait(1);
  gQuitYN.SetPosition(314, 300);
  gQuitYN.Visible = true;
  mouse.UseModeGraphic(eModePointer);
}

function btnResume_OnClick(GUIControl *control, MouseButton button)
{
  gPanel.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
}

function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

function btnDefault_OnClick(GUIControl *control, MouseButton button)
{
  // Reset everything to default. You'll have to edit these as well as the sliders
  // if you'd rather have different default parameters.
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  sldSpeed.Value = 40;
  SetGameSpeed(40);
  if (IsSpeechVoxAvailable()) {
     Speech.VoiceMode = eSpeechVoiceAndText;
     SetSpeechVolume(255);
  }
  if (System.SupportsGammaControl) {
    System.Gamma = 100;
  }
}
//END OF CONTROL PANEL FUNCTIONS

function dialog_request(int param) 
{
  // This is used by the dialog text parser if you need to process
  // text that the player types in to the parser.
  // It is not used by default.
  if (param == 1) {
    Wait(10);
  }
  if (param == 2) {
    cMick.FaceLocation(cCrazyLarry.x, cCrazyLarry.y);
  }
  if (param == 3) {
    cMick.FaceLocation(760, 425);
  }
  if (param == 4) {
    cMick.FaceLocation(cCrazyLarry.x, cCrazyLarry.y);
  }
  if (param == 5) {
    cCrazyLarry.FaceLocation(515, 175);
  }
  if (param == 6) {
    cCrazyLarry.FaceLocation(cMick.x, cMick.y);
  }
  if (param == 7) {
    cMick.FaceLocation(515, 175);
  }
  if (param == 8) {
    cCrazyLarry.Walk(362, 404);
    cMick.Walk(362, 575, eBlock);
    cMick.Say("Ok. You ready? On my go.");
    cCrazyLarry.Say("Let's do this. Come on Gunther.");
    cMick.Say("1...");
    cMick.Say("2...");
    cMick.Say("GO!!");
    cCrazyLarry.Walk(488, 404, eBlock);
    object[1].Animate(1, 5, eOnce, eBlock, eForwards);
    object[1].Visible = false;
    cCrazyLarry.ChangeRoom(302);
    RestoreWalkableArea(2);
    cMick.Say("Oh snap!!");
    Wait(10);
    cMick.Say("Umm...");
    cMick.Say("..Sorry?");
    gIconbar.Visible = true;
  }
}

function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}

function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  gRestartYN.Visible=true;
  gIconbar.Visible=false;
}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{
  RestartGame();
}

function btnRestartNo_OnClick(GUIControl *control, MouseButton button)
{
  gRestartYN.Visible = false;
  gIconbar.Visible = true;
  // If the panel's not ON, then the player must have gotten here by tapping F9,
  // therefore his cursor needs restoring. If the panel IS on, then it doesn't,
  // because it's already a pointer. Get used to thinking like this!!
  if (!gPanel.Visible) mouse.UseDefaultGraphic(); 
}


// Mick interactions
function cMick_Look()
{
  cMick.Say("Damn, I'm looking good!");
}
function cMick_Interact()
{
  cMick.Say("You're not gonna make me touch myself, are you?");
}
function cMick_Talk()
{
  cMick.Say("Talking to yourself is a sign of madness!");
  cMick.Say("Hahaha");
  cMick.Say("Haha");
  cMick.Say("Hmm...");
}

// S.A.L interactions
function cSal_UseInv()
{
  if (cMick.Room == 2) {
    cMick.Walk(580, 620, eBlock);
    if (player.ActiveInventory == iFuelContainer) {
      cSal.SpeechView = 4;
      cSal.Say("Don't insult me!");
      cSal.Say("I will not EVER drink this low quality excuse for fuel!");
      cSal.Say("Go get me the REAL DEAL!!!");
      cSal.SpeechView = 3;
    }
    else if (player.ActiveInventory == iTalkingSubFuel) {
      aRunning_sub.Play(eAudioPriorityHigh);
      cSal.Say("OOOOHHHHHHH YEAHHHHHH!!!!!");
      cSal.Say("GAS-O-LINE!!!");
      cSal.Say("BEAM ME UP SCOTTYYYYYY!!!!");
      RestoreWalkableArea(2);
      salfueled = true;
      cMick.LoseInventory(iTalkingSubFuel);
    }
  }
}
function cSal_Talk()
{
  cSal.Say("There's something that can help you in this fuel disposal device over here..");
}
function cSal_Interact()
{
  cSal.Say("No Touchy!");
}

function cSal_Look()
{
  cSal.Say("Looky only, no touchy!");
}

// cursor selection gui buttons
function setInteract_OnClick(GUIControl *control, MouseButton button)
{
  gCursorSelect.Visible = false;
  mouse.Mode = eModeInteract;
}

function setWalk_OnClick(GUIControl *control, MouseButton button)
{
  gCursorSelect.Visible = false;
  mouse.Mode = eModeWalkto;
}

function setTalk_OnClick(GUIControl *control, MouseButton button)
{
  gCursorSelect.Visible = false;
  mouse.Mode = eModeTalkto;
}

function setLook_OnClick(GUIControl *control, MouseButton button)
{
  gCursorSelect.Visible = false;
  mouse.Mode = eModeLookat;
}


// Inventory items interactions
function iFuelContainer_Look()
{
  InvDescription.Text = "Fuel container";
  inventoryLabelCounter = 0;
}
function iTalkingSubFuel_Look()
{
  InvDescription.Text = "Talking submarine fuel";
  inventoryLabelCounter = 0;
}
function iBedspring_Look()
{
  InvDescription.Text = "Bed spring";
  inventoryLabelCounter = 0;
}
function iFlashlight_Look()
{
  InvDescription.Text = "Flashlight";
  inventoryLabelCounter = 0;
}

// ROOM 3

function btnDictionary_OnClick(GUIControl *control, MouseButton button) {

  cMick.AddInventory(iDictionary);
  btnDictionary.Visible = false;
}

function iDictionary_Look()
{
  InvDescription.Text = "Dictionary";
  inventoryLabelCounter = 0;
  gDictText.Visible = true;
  gDictText.SetPosition(168, 50);
}

function btnExitDrawer_OnClick(GUIControl *control, MouseButton button)
{
 gDrawer.Visible = false;
}

function btnExitDictText_OnClick(GUIControl *control, MouseButton button)
{
  gDictText.Visible = false;
}


function btnMagGlass_OnClick(GUIControl *control, MouseButton button)
{
  cMick.AddInventory(iMagGlass);
  btnMagGlass.Visible = false;
}

function btnExitWallText_OnClick(GUIControl *control, MouseButton button)
{
  gWallText.Visible = false;
}

function btnExitCompScreen_OnClick(GUIControl *control, MouseButton button)
{
  gCompScreen.Visible = false;
}

function btnEnterPass_OnClick(GUIControl *control, MouseButton button)
{
  if (UserText.Text == "password")
  {
    gCompScreen.Visible = false;
    cSal.Say("You got it! I can't believe it!");
    cSal.SayAt(450, 60, 500, "But we were having so much fun!");
    ShakeScreen(7);
    cSal.SayAt(450, 60, 500, "Noooo don't go! I don't like this place");
    passwordEntered = true;
  }
  else{
    UserText.Text = "WRONG!! HA-HA! TRY AGAIN!!";
    
    
  }
}

function btnExitInstructions_OnClick(GUIControl *control, MouseButton button)
{
gInstructions.Visible = false;
}

function gDrawer_OnClick(GUI *theGui, MouseButton button)
{

}

function UserText_OnActivate(GUIControl *control)
{

}

function cCrazyLarry_Talk()
{
  gIconbar.Visible = false;
  dDialogCrazyLarry.Start();
}




function btnHelp_OnClick(GUIControl *control, MouseButton button)
{
  gInstructions.SetPosition(168, 50);
  gInstructions.Visible = true;
}

function btnQuitNo_OnClick(GUIControl *control, MouseButton button)
{
  gQuitYN.Visible = false;
  gIconbar.Visible = true;
  // If the panel's not ON, then the player must have gotten here by tapping F9,
  // therefore his cursor needs restoring. If the panel IS on, then it doesn't,
  // because it's already a pointer. Get used to thinking like this!!
  if (!gPanel.Visible) mouse.UseDefaultGraphic(); 
}

function btnQuitYes_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

function iMagGlass_Look()
{
  InvDescription.Text = "Magnifying Glass";
  inventoryLabelCounter = 0;
}
